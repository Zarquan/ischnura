#
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2016 by Wizzard Solutions Ltd, ischnura@metagrid.co.uk
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

https://www.hogarthuk.com/?q=node/13

http://wiki.libvirt.org/page/Qemu_guest_agent
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/chap-QEMU_Guest_Agent.html

#---------------------------------------------------------------------
# ....
#[user@methionine] 

    pushd /var/local/projects/metagrid/ischnura
        pushd master

#---------------------------------------------------------------------
# Initial settings
#[user@methionine] 

    datpath=src/dat
    cfgfile=src/config

    : ${tempdir:='/tmp'}
    : ${basepool:='base'}
    : ${livepool:='live'}
    : ${connection:='qemu:///system'}

#---------------------------------------------------------------------
# Create our config file
#[user@methionine] 

    cat > src/config << 'EOF'
machines=${datpath:?}/metagrid-machines.txt
template=${datpath:?}/metagrid-template.xml
EOF

#---------------------------------------------------------------------
# Create the initial base image.
#[user@methionine] 

    #
    # Set the VM properties.
    nodeos=fedora-23    
    nodecpu=2
    nodemem=2048
    nodearch=x86_64

    basesize=8G
    basename=${nodeos}-base-$(date +%Y%m%d)
    basefile=${basename}.qcow

    #
    # Delete any existing volume.
    virsh \
        --connect "${connection:?}" \
        vol-delete \
            --pool "${basepool}" \
            "${basefile:?}"

    #
    # Create a new (empty) volume.
    virsh \
        --connect "${connection:?}" \
        vol-create-as \
            "${basepool:?}" \
            "${basefile:?}" \
            "${basesize:?}" \
            --format qcow2

    basepath=$(virsh --connect "${connection:?}" vol-path --pool "${basepool:?}" "${basefile:?}")

    #
    # Build our VM image.
    sudo virt-builder \
        --verbose \
        --no-network \
        --format  'qcow2' \
        --arch    "${nodearch:?}" \
        --output  "${basepath:?}" \
        "${nodeos:?}"

#---------------------------------------------------------------------
# Create a vm to prepare the base image.
#[user@methionine] 

    vmname=selinux-boot

    #
    # Load the local config
    source src/config

    #
    # Delete any existing VM.
    virsh \
        --connect "${connection:?}" \
        undefine "${vmname:?}"

    #
    # Create a new VM definition.
    tempxml=$(mktemp)
    sed '
        s|<name>.*</name>|<name>'"${vmname:?}"'</name>|
        s|<source file='\''.*'\''/>|<source file='\'''"${basepath}"''\''/>|
        s|<mac address='\''.*'\''/>|<mac/>|
        ' "${template}" > "${tempxml}"

    #
    # Define the new VM.
    virsh \
        --connect "${connection:?}" \
        define "${tempxml}"

    #
    # Add our SSH key and trigger a restorecon.
    sudo virt-sysprep \
        --connect "${connection:?}" \
        --domain "${vmname:?}" \
        --root-password random \
        --ssh-inject root:file:/home/Zarquan/.ssh/zrq.metagrid.co.uk.rsa.pub \
        --firstboot-command 'restorecon -Rv /root/.ssh'

   #
   # Delete the VM, but not the volume.
   virsh \
       --connect "${connection:?}" \
       undefine "${vmname:?}"

#---------------------------------------------------------------------
# Create a new VM.
#[user@methionine] 

    vmname=eta

    src/bin/createvm

    ssh "${vmname}"

# -----------------------------------------
# Install useful admin tools.
#[root@virtual]

    dnf -y install sed
    dnf -y install gawk

    dnf -y install vim
    dnf -y install nano

    dnf -y install tar
    dnf -y install zip
    dnf -y install gzip

    dnf -y install htop
    dnf -y install pwgen

    dnf -y install iputils
    dnf -y install net-tools
    dnf -y install bind-utils
    
# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@virtual]

    #
    # Install the entropy generator.
    dnf install -y haveged

    #
    # Enable the service.
    systemctl enable haveged.service

#---------------------------------------------------------------------
# Install our Docker tools.
#[root@virtual] 

    #
    # Add the Docker repository.
    cat << 'EOF' > /etc/yum.repos.d/docker.repo 
[docker-repo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/fedora/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

    #
    # Install the docker engine
    dnf -y install docker-engine

    #
    # Enable the Docker service.
    systemctl enable docker.service

#---------------------------------------------------------------------
# Shutdown the VM.
#[root@virtual] 

    poweroff

#---------------------------------------------------------------------
# Check the qcow chain.
#[user@methionine] 

    vmpath=$(virsh --connect "${connection:?}" vol-path --pool "${livepool:?}" "${vmname:?}.qcow")

    sudo qemu-img \
        info \
        --backing-chain \
        "${basepath:?}"

        image: /var/lib/libvirt/images/base/fedora-23-base-20160627.qcow
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 920M
        cluster_size: 65536
        Format specific information:
            compat: 1.1
            lazy refcounts: false
            refcount bits: 16
            corrupt: false

    sudo qemu-img \
        info \
        --backing-chain \
        ${vmpath:?}

        image: /var/lib/libvirt/images/live/eta.qcow
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 357M
        cluster_size: 65536
        backing file: /var/lib/libvirt/images/base/fedora-23-base-20160627.qcow
        backing file format: qcow2
        Format specific information:
            compat: 0.10
            refcount bits: 16

        image: /var/lib/libvirt/images/base/fedora-23-base-20160627.qcow
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 920M
        cluster_size: 65536
        Format specific information:
            compat: 1.1
            lazy refcounts: false
            refcount bits: 16
            corrupt: false

#---------------------------------------------------------------------
# Clean the vm image.
#[user@methionine] 

    sudo virt-sysprep \
        --connect "${connection:?}" \
        --domain "${vmname:?}" \
        --operations 'defaults,-ssh-userdir'

#---------------------------------------------------------------------
# Create a compressed copy of the image.
#[user@methionine] 

    tmpfile=$(mktemp)

    sudo qemu-img \
        convert \
            -c \
            -O qcow2 \
            "${vmpath:?}" \
            "${tmpfile:?}"

#---------------------------------------------------------------------
# Check the file info.
#[user@methionine] 

    sudo qemu-img \
        info \
            --backing-chain \
            "${tmpfile}"

        image: /tmp/tmp.8zu12KGUmC
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 611M
        cluster_size: 65536
        Format specific information:
            compat: 1.1
            lazy refcounts: false
            refcount bits: 16
            corrupt: false

#---------------------------------------------------------------------
# Upload the new image.
#[user@methionine] 

    docksize=8G
    dockname=${nodeos}-docker-$(date +%Y%m%d)
    dockfile=${dockname}.qcow
    
    virsh \
        --connect "${connection:?}" \
        vol-create-as \
            "${basepool:?}" \
            "${dockfile:?}" \
            "${docksize:?}" \
            --format 'qcow2'

    virsh \
        --connect "${connection:?}" \
        vol-upload \
            --pool "${basepool:?}" \
            "${dockfile:?}" \
            "${tmpfile:?}"

#---------------------------------------------------------------------
# Check the file info.
#[user@methionine] 

    sudo qemu-img \
        info \
        --backing-chain \
        $(virsh --connect "${connection:?}" vol-path --pool "${basepool:?}" "${dockfile:?}")

            image: /var/lib/libvirt/images/base/fedora-23-docker-20160627
            file format: qcow2
            virtual size: 6.0G (6442450944 bytes)
            disk size: 615M
            cluster_size: 65536
            Format specific information:
                compat: 1.1
                lazy refcounts: false
                refcount bits: 16
                corrupt: false

#---------------------------------------------------------------------
# Create a test vm.
#[user@methionine] 

    vmname=eta

    src/bin/createvm


#---------------------------------------------------------------------
# Login and test the new vm.
#[user@methionine] 

    ssh "${vmname}"

        docker run -it debian bash

            Unable to find image 'debian:latest' locally
            latest: Pulling from library/debian
            5c90d4a2d1a8: Pull complete 
            Digest: sha256:8b1fc3a7a55c42e3445155b2f8f40c55de5f8bc8012992b26b570530c4bded9e
            Status: Downloaded newer image for debian:latest

            root@557a127aa4d2:/# 

            exit
        exit

#---------------------------------------------------------------------
# Push the base image to our webserver.
#[user@methionine] 

    basepath=$(virsh --connect "${connection:?}" vol-path --pool "${basepool:?}" "${basefile:?}")
    basegzip=/tmp/${basefile:?}.gz

    sudo chmod a+r ${basepath:?}
    
    gzip -c "${basepath:?}" > "${basegzip:?}"

    rsync \
        --stats \
        --progress \
        --human-readable \
        ${basegzip:?} \
        root@data.metagrid.co.uk:/var/local/websites/data/ischnura/base

#---------------------------------------------------------------------
# Push the docker image to our webserver.
#[user@methionine] 

    dockpath=$(virsh --connect "${connection:?}" vol-path --pool "${basepool:?}" "${dockfile:?}")
    dockgzip=/tmp/${dockfile:?}.gz

    sudo chmod a+r ${dockpath:?}
    
    gzip -c "${dockpath:?}" > "${dockgzip:?}"

    rsync \
        --stats \
        --progress \
        --human-readable \
        ${dockgzip:?} \
        root@data.metagrid.co.uk:/var/local/websites/data/ischnura/base

#---------------------------------------------------------------------
# Download our docker image.
#[user@shep] 

    docksize=8G
    dockname=fedora-23-docker-20160627
    dockfile=${dockname:?}.qcow
    dockgzip=${dockfile:?}.gz

    wget "http://data.metagrid.co.uk/ischnura/base/${dockgzip:?}"

    gunzip "${dockgzip:?}"
    
#---------------------------------------------------------------------
# Install our docker image.
#[user@shep] 

    : ${tempdir:='/tmp'}
    : ${basepool:='base'}
    : ${livepool:='live'}
    : ${connection:='qemu:///system'}
    
    virsh \
        --connect "${connection:?}" \
        vol-create-as \
            "${basepool:?}" \
            "${dockfile:?}" \
            "${docksize:?}" \
            --format 'qcow2'

    virsh \
        --connect "${connection:?}" \
        vol-upload \
            --pool "${basepool:?}" \
            "${dockfile:?}" \
            "${dockfile:?}"


