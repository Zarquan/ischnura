#
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2016 by Wizzard Solutions Ltd, ischnura@metagrid.co.uk
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

http://linux.die.net/man/1/virsh

http://libguestfs.org/guestfs.3.html


http://libguestfs.org/virt-builder.1.html
http://libguestfs.org/download/builder/README
http://libguestfs.org/download/builder/index.asc

http://libguestfs.org/virt-sysprep.1.html

http://libguestfs.org/virt-customize.1.html
http://libguestfs.org/virt-rescue.1.html

https://kashyapc.fedorapeople.org/virt/blockpull/blockpull-notes.txt
https://kashyapc.fedorapeople.org/virt/lc-2012/snapshots-handout.html


#---------------------------------------------------------------------
# ....
#[user@methionine] 

    pushd /var/local/projects/metagrid/ischnura
        pushd shep

#---------------------------------------------------------------------
# Initial settings
#[user@methionine] 

    datpath=src/dat
    cfgfile=src/config
    #source "${cfgfile:?}"

    : ${tempdir:='/tmp'}
    : ${basepool:='base'}
    : ${livepool:='live'}
    : ${connection:='qemu:///system'}

#---------------------------------------------------------------------
# Create the initial base image.
#[user@methionine] 

    nodeos=fedora-23    

    #
    # Set the VM properties.
    nodecpu=2
    nodemem=2048
    nodearch=x86_64

    nodetype=small
    nodedate=$(date +%Y%m%d)
    nodename=${nodeos}-${nodetype}-${nodedate:?}

    #
    # Set the volume properties.
    volsize=8G
    volname=${nodename}.qcow

    #
    # Delete any existing volume.
    virsh \
        --connect "${connection:?}" \
        vol-delete \
            --pool "${basepool}" \
            "${volname:?}"

    #
    # Create a new (empty) volume.
    virsh \
        --connect "${connection:?}" \
        vol-create-as \
            "${basepool:?}" \
            "${volname:?}" \
            "${volsize:?}" \
            --format qcow2

    virsh \
        --connect "${connection:?}" \
        vol-info \
            --pool "${basepool}" \
            "${volname:?}"

    volpath=$(virsh --connect "${connection:?}" vol-path --pool "${basepool:?}" "${volname:?}")

    #
    # Build a our VM image.
    sudo virt-builder \
        --verbose \
        --no-network \
        --format  'qcow2' \
        --arch    "${nodearch:?}"   \
        --output  "${volpath:?}"    \
        "${nodeos:?}"

#---------------------------------------------------------------------
# Create and run a vm to trigger the selinux-relabel.
#[user@methionine] 

    #
    # Load the local config
    source src/config

    #
    # Delete any existing VM.
    virsh \
        --connect "${connection:?}" \
        undefine "${nodename:?}"

    #
    # Create a new VM definition.
    tempxml=$(mktemp)
    sed '
        s|<name>.*</name>|<name>'"${nodename:?}"'</name>|
        s|<source file='\''.*'\''/>|<source file='\'''"${volpath}"''\''/>|
        s|<mac address='\''.*'\''/>|<mac/>|
        ' "${template}" > "${tempxml}"

    #
    # Define the new VM.
    virsh \
        --connect "${connection:?}" \
        define "${tempxml}"

    #
    # Trigger the relabel.
    # As-is, this triggers a double boot.
    sudo virt-sysprep \
        --connect "${connection:?}" \
        --domain "${nodename:?}" \
        --root-password password:NOPASS \
        --ssh-inject root:file:/home/Zarquan/.ssh/zrq.metagrid.co.uk.rsa.pub \
        --selinux-relabel

    #
    # Run the VM once to handle the relabel.
    # With this in place, we avoid the double boot.
    # However, we get the same SSH keys each time.
    virsh \
        --connect "${connection:?}" \
        start "${nodename:?}"
    sleep 60
    virsh \
        --connect "${connection:?}" \
        shutdown "${nodename:?}"

    #
    # Clean the image (but not the user keys).
    sudo virt-sysprep \
        --connect "${connection:?}" \
        --domain "${nodename:?}" \
        --operations 'defaults,-ssh-userdir'

#       #
#       # Delete the VM, but not the volume.
#       virsh \
#           --connect "${connection:?}" \
#           undefine "${nodename:?}"

#---------------------------------------------------------------------
# Create a new VM.
#[user@methionine] 

    src/bin/createvm

#---------------------------------------------------------------------
# Login to the new VM.
#[user@methionine] 

    vmname=eta
    vmpath=$(virsh --connect "${connection:?}" vol-path --pool "${livepool:?}" "${vmname:?}.qcow")

    ssh "${vmname}"

# -----------------------------------------
# Install useful admin tools.
#[root@virtual]

    dnf -y install sed
    dnf -y install gawk

    dnf -y install vim
    dnf -y install nano

    dnf -y install tar
    dnf -y install zip
    dnf -y install gzip

    dnf -y install htop
    dnf -y install pwgen

    dnf -y install iputils
    dnf -y install net-tools
    dnf -y install bind-utils
    
# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@virtual]

    #
    # Install the entropy generator.
    dnf install -y haveged

    #
    # Enable the service.
    systemctl enable haveged.service

#---------------------------------------------------------------------
# Install our Docker tools.
#[root@virtual] 

    #
    # Add the Docker repository.
    cat << 'EOF' > /etc/yum.repos.d/docker.repo 
[docker-repo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/fedora/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

    #
    # Install the docker engine
    dnf -y install docker-engine

    #
    # Enable the Docker service.
    systemctl enable docker.service

#---------------------------------------------------------------------
# Exit the VM, but leave it running.
#[root@virtual] 

    exit

#---------------------------------------------------------------------
# Check the qcow chain.
#[user@methionine] 

    sudo qemu-img info --backing-chain "${vmpath}"

        image: /var/lib/libvirt/images/live/eta.qcow
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 361M
        cluster_size: 65536
        backing file: /var/lib/libvirt/images/base/fedora-23-small-20160624.qcow
        backing file format: qcow2
        Format specific information:
            compat: 0.10
            refcount bits: 16

        image: /var/lib/libvirt/images/base/fedora-23-small-20160624.qcow
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 930M
        cluster_size: 65536
        Format specific information:
            compat: 1.1
            lazy refcounts: false
            refcount bits: 16
            corrupt: false

#---------------------------------------------------------------------
# Flatten the qcow chain.
#[user@methionine] 

    #
    # Given the copy step later, do we need to do this ?
    #
    
    virsh \
        --connect "${connection:?}" \
        blockpull \
            "${vmname:?}" \
            vda \
            --wait

#---------------------------------------------------------------------
# Check the file info.
#[user@methionine] 

    sudo qemu-img info --backing-chain "${vmpath}"

        image: /var/lib/libvirt/images/live/eta.qcow
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 1.2G
        cluster_size: 65536
        Format specific information:
            compat: 0.10
            refcount bits: 16

#---------------------------------------------------------------------
# Shutdown the VM.
#[user@methionine] 

    virsh \
        --connect "${connection:?}" \
        shutdown "${vmname:?}"

#---------------------------------------------------------------------
# Clean the vm image.
#[user@methionine] 

    sudo virt-sysprep \
        --connect "${connection:?}" \
        --domain "${vmname:?}" \
        --operations 'defaults,-ssh-userdir'

#---------------------------------------------------------------------
# Create a compressed copy of the image.
#[user@methionine] 

    tmpfile=$(mktemp)

    sudo qemu-img \
        convert \
            -c \
            -O qcow2 \
            "${vmpath:?}" \
            "${tmpfile:?}"

#---------------------------------------------------------------------
# Check the file info.
#[user@methionine] 

    sudo qemu-img info --backing-chain "${tmpfile}"

        image: /tmp/tmp.Srs69cSxlf
        file format: qcow2
        virtual size: 6.0G (6442450944 bytes)
        disk size: 618M
        cluster_size: 65536
        Format specific information:
            compat: 1.1
            lazy refcounts: false
            refcount bits: 16
            corrupt: false


#---------------------------------------------------------------------
# Upload the new image.
#[user@methionine] 

    basename=fedora-23-docker-20160624.qcow

    virsh \
        --connect "${connection:?}" \
        vol-create-as \
            "${basepool:?}" \
            "${basename:?}" \
            "${volsize:?}"  \
            --format 'qcow2'

    virsh \
        --connect "${connection:?}" \
        vol-upload \
            --pool "${basepool:?}" \
            "${basename:?}" \
            "${tmpfile:?}"


#---------------------------------------------------------------------
# Check the file info.
#[user@methionine] 

    sudo qemu-img info \
        --backing-chain \
        $(virsh --connect "${connection:?}" vol-path --pool "${basepool:?}" "${basename:?}")

            image: /var/lib/libvirt/images/base/fedora-23-docker-20160624.qcow
            file format: qcow2
            virtual size: 6.0G (6442450944 bytes)
            disk size: 621M
            cluster_size: 65536
            Format specific information:
                compat: 1.1
                lazy refcounts: false
                refcount bits: 16
                corrupt: false

#---------------------------------------------------------------------
# Create a test vm.
#[user@methionine] 

    src/bin/createvm

#---------------------------------------------------------------------
# Login and test the new vm.
#[user@methionine] 

    ssh root@eta

        docker run -it debian bash

            Unable to find image 'debian:latest' locally
            latest: Pulling from library/debian
            5c90d4a2d1a8: Pull complete 
            Digest: sha256:8b1fc3a7a55c42e3445155b2f8f40c55de5f8bc8012992b26b570530c4bded9e
            Status: Downloaded newer image for debian:latest

            root@557a127aa4d2:/# 



