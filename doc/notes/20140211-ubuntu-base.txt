#
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2014 by Wizzard Solutions Ltd, ischnura@metagrid.co.uk
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

#---------------------------------------------------------------------
# Most if not all of this is already available using virt-builder.
# http://libguestfs.org/download/builder/README
#
# Some of this is available using virt-sysprep
# http://libguestfs.org/virt-sysprep.1.html
#

#---------------------------------------------------------------------
# Create the initial VM.
#[root@kvm-server] 

    Manual install of minimal Ubuntu server.
    Core system + SSH server.
    MAC 52:54:00:00:01:07

    base    ubuntu-13-000   52:54:00:00:01:07     10.5.1.7    2001:08b0:be72:d4ea:5054:00ff:fe00:0107

    Bare ext4 partition at /    
    No swap partition.

#---------------------------------------------------------------------
# Check the image alignment.
# http://libguestfs.org/virt-alignment-scan.1.html
#[root@kvm-server] 

    vmdomain=test-05
    virt-alignment-scan -d "${vmdomain:?}"

        /dev/sda1      1048576         1024K   ok

#---------------------------------------------------------------------
# Mount the virtual disc.
#[root@kvm-server] 

    vmdomain=test-05
    vmmount=$(mktemp --directory)

    guestmount --domain "${vmdomain:?}" --inspector --rw --selinux "${vmmount:?}"

    ls -al "${vmmount:?}"

#---------------------------------------------------------------------
# Remove hardcoded hostname.
#[root@kvm-server] 

    cat   "${vmmount:?}/etc/hostname"
    rm -f "${vmmount:?}/etc/hostname"

# TODO set the hostname from DHCP
# http://www.debian-administration.org/articles/447
# https://nullcore.wordpress.com/2011/12/09/setting-the-system-hostname-from-dhcp-in-ubuntu-11-10/

#---------------------------------------------------------------------
# Delete the persistent-net rule for eth0.
#[root@kvm-server] 

    cat   "${vmmount:?}/etc/udev/rules.d/70-persistent-net.rules"
    rm -f "${vmmount:?}/etc/udev/rules.d/70-persistent-net.rules"

#---------------------------------------------------------------------
# Clean the eth0 interface config.
#[root@kvm-server] 
#
#    cat "${vmmount:?}/etc/sysconfig/network-scripts/ifcfg-eth0"
#    sed -i '
#        /^UUID/d
#        /^NM_CONTROLLED/d
#        /^HWADDR/d
#        ' "${vmmount:?}/etc/sysconfig/network-scripts/ifcfg-eth0"
#
#
# Configure eth0 interface to start on boot.
#[root@kvm-server] 
#
#    cat "${vmmount:?}/etc/sysconfig/network-scripts/ifcfg-eth0"
#    sed -i '
#        s/^ONBOOT=.*/ONBOOT=yes/
#        ' "${vmmount:?}/etc/sysconfig/network-scripts/ifcfg-eth0"
#

#
# Check for the following ..
#    cat "${vmmount:?}/etc/network/interfaces"
#
#    auto eth0
#    iface eth0 inet dhcp
#

#---------------------------------------------------------------------
# Add our ssh keys.
#[root@kvm-server] 

    if [ ! -e "${vmmount:?}/root/.ssh" ]
    then
        mkdir "${vmmount:?}/root/.ssh"
    fi

    pushd "${vmmount:?}/root/.ssh"

        if [ ! -e 'keys' ]
        then
            mkdir 'keys'
        fi
        pushd 'keys'
            wget 'http://data.metagrid.co.uk/sshkeys/zarquan.metagrid.co.uk.pub'
            wget 'http://data.metagrid.co.uk/sshkeys/jenifer.metagrid.co.uk.pub'
        popd

        for keyfile in $(find 'keys' -name '*.pub')
        do
            echo "${keyfile:?}" 
            cat  "${keyfile:?}" >> 'authorized_keys'
        done

    popd
    
    chown root:root   "${vmmount:?}/root/.ssh"
    chmod g=,o=,u=rwx "${vmmount:?}/root/.ssh"

#---------------------------------------------------------------------
# Disable SSH password login.
#[root@kvm-server] 

    sed -i '
        s/^#PasswordAuthentication .*/PasswordAuthentication no/
        ' "${vmmount:?}/etc/ssh/sshd_config"

#---------------------------------------------------------------------
# Randomise the root password.
# WARN - This doesn't actually set the password to the right value.
# It probably is random, but not what we expect it to be.
#[root@kvm-server] 

    roothash=$(pwgen 20 1 | sha512sum | cut --delimiter ' ' --fields 1)

    sed -i '
        /^root:/ {
            s/^root:\([^:]*\):\(.*\)/root:$6$'${roothash:?}':\2/
            }
        ' "${vmmount:?}/etc/shadow"

#---------------------------------------------------------------------
# Remove the extra user account.
#[root@kvm-server] 

    username=extra
    userhome=$(
        sed -n '
            s/'${username:?}':\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\([^:]*\):\(.*\)/\5/p
            ' "${vmmount:?}/etc/passwd" 
        )
        
    sed -n '
        /^'${username:?}':.*/ d
        ' "${vmmount:?}/etc/passwd" 

    sed -n '
        /^'${username:?}':.*/ d
        ' "${vmmount:?}/etc/shadow" 

    rm -rf "${vmmount:?}/${userhome:?}"


#---------------------------------------------------------------------
# Unmount the virtual disc.
#[root@kvm-server] 

    fusermount -u "${vmmount:?}"
    #guestunmount "${vmmount:?}"

# -----------------------------------------
# Sparsify the image file.
#[root@kvm-server] 

    #
    # Fix for lvresize bug (same size fails)
    # https://bugzilla.redhat.com/show_bug.cgi?id=834712
    # --ignore ubuntu-base

    vmdomain=test-05
    vmsource=$(virsh domblklist "${vmdomain:?}" | sed -n 's/^vda[ ]*\([^ ]*\)/\1/p')
    vmsparse=$(mktemp)

    virt-sparsify \
        --compress \
        --convert qcow2 \
        --ignore ubuntu-base \
        "${vmsource:?}" \
        "${vmsparse:?}"

    ls -alh "${vmsource:?}"
    ls -alh "${vmsparse:?}"

# -----------------------------------------
# Install our sparse image.
#[root@kvm-server] 

    volpool=base
    volname=ubuntu-13-base-20140211
    volfile=${volname:?}.qcow

    virsh vol-delete --pool "${volpool:?}" "${volfile:?}"
    virsh vol-create-as "${volpool:?}" "${volfile:?}" 8GiB --allocation 0 --format qcow2
    
    virsh vol-upload --pool "${volpool:?}" "${volfile:?}" "${vmsparse:?}"
    virsh vol-info   --pool "${volpool:?}" "${volfile:?}"
    virsh vol-path   --pool "${volpool:?}" "${volfile:?}"
    
# -----------------------------------------
# Create a sparse tar file and upload it to our repository.
#[root@kvm-server] 

    imgfile=${volfile:?}
    tarfile=${volname:?}.tar.gz
    basedir=/var/local/projects/ischnura/base
    
    tempdir=$(mktemp --directory)
    pushd "${tempdir:?}"

        ln "${vmsparse:?}" "${imgfile:?}"

        tar \
            --gzip \
            --create \
            --sparse \
            --verbose \
            --file "${basedir:?}/${tarfile:?}" \
            "${imgfile:?}"

    popd
    rm -r "${tempdir:?}"

    rsync \
        --recursive --copy-links --checksum \
        --stats --human-readable --progress \
        "${basedir:?}/" \
        data.metagrid.co.uk:/var/local/websites/data/ischnura/base

# -----------------------------------------
# Tidy up ...
#[root@kvm-server] 

    virsh undefine --remove-all-storage "${vmdomain:?}"
    rmdir "${vmmount:?}"

# -----------------------------------------
# Try using our new image ...
#[root@kvm-server] 

    ischnura-createvm

        [1] nu
        [2] xi
        ....
        Select machine name (1) 2

        Available base images
        ....
        [6] ubuntu-12-base-20130106.qcow
        [7] ubuntu-13-base-20140211.qcow

        Select base image (1) 7 

        INFO : Node name [xi]
        INFO : Base name [ubuntu-13-base-20140211.qcow]
        INFO : Disc name [xi.qcow]
        INFO : Disc size [8G]
        ....

# -----------------------------------------
# Configure our guest vm. 
#[root@kvm-guest] 

#
# Update the system.
#[root@kvm-guest] 

    apt-get -y update
    apt-get -y upgrade

#
# Install Puppet client.
#[root@kvm-guest] 
    
    #
    # Install the puppet client.
    apt-get -y install puppet

    #
    # Enable the puppet agent.
    sed -i '
        s/^START=.*/START=yes/
        ' /etc/default/puppet

    #
    # Use Puppet to enable the Puppet service
    # http://docs.puppetlabs.com/guides/installation.html#post-install
    puppet resource service puppet ensure=running enable=true

