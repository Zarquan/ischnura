#!/bin/bash
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2013 by Wizzard Solutions Ltd, ischnura@metagrid.co.uk
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

binpath=$(dirname $(readlink -f ${0}))
srcpath=$(dirname ${binpath:?})
toppath=$(dirname ${srcpath:?})
datpath=${srcpath:?}/dat

#
# Load our local configuration.
cfgfile=${srcpath:?}/config
if [ -e "${cfgfile:?}" ]
then
    source "${cfgfile:?}"
else
    echo "ERROR : unable to find config [${cfgfile}]"
    #exit -1
fi

#
# Set the default settings.
: ${tempdir:='/tmp'}
: ${basepool:='base'}
: ${livepool:='live'}
: ${initpool:='init'}
: ${connection:='qemu:///system'}

#
# Check the configuration data.
echo ""
echo "INFO : Base pool  [${basepool:?}]"
echo "INFO : Live pool  [${livepool:?}]"
echo "INFO : Connection [${connection:?}]"

echo ""
echo "INFO : Data path  [${datpath:?}]"

echo ""
echo "INFO : Machines   [${machines:?}]"
echo "INFO : Template   [${template:?}]"

if [ ! -f "${machines}" ]
then
    echo "ERROR : unable to find machines [${machines}]"
    #exit -1
fi

if [ ! -f "${template}" ]
then
    echo "ERROR : unable to find template [${template}]"
    #exit -1
fi

#
# Load our input utils.
if [ ! -f "${binpath}/utils" ]
then
    echo "ERROR : unable to load utils [${binpath}/utils]"
    #exit -1
else
    source "${binpath}/utils"
fi

#
# Select the machine name.
echo ""
#echo "Available machine names"
thisname=$(hostname -s)
namelist=( $(cat "${machines:?}" | awk '{if ($1 == "'${thisname:?}'") {print $2}}') )
for ((index = 0 ; index < ${#namelist[@]} ; index++))
do
    echo "[$[index + 1]] ${namelist[$index]}"
done

nodename=''
while [ "${nodename}" == '' ]
do
    read -p "Select machine name (1) " response
    if [ "${response}" == '' ]
    then
        nodename=${namelist[0]}
    else
        words=(${response})
        (( index = ${words[0]}  ))
        (( limit = ${#namelist[@]} ))
        if (( (index > 0) && (index <= limit) ))
        then
            nodename=${namelist[$[index-1]]}
        fi
    fi
done

#
# List the available base volumes.
# Sort added to filter duplicates (https://github.com/Zarquan/ischnura-kvm/issues/14).
tempdat=$(mktemp)
virsh \
    --connect "${connection:?}" \
    vol-list --pool \
    "${basepool}" \
  | sort --unique > "${tempdat}"

readarray -t lines < <(
tac "${tempdat}" |
sed '
    /^ Name/ d    
    /^----/ d    
    /^$/ d    
    '
    )

basepaths=()
basenames=()
for ((index = 0 ; index < ${#lines[@]} ; index++))
do
    line=${lines[$[index]]}
    if [ -n "${line}" ]
    then
        words=(${line})
        basenames[$index]=${words[0]}
        basepaths[$index]=${words[1]}
    fi
done

#
# Select the base volume
echo ""
#echo "Available base images"
for ((index = 0 ; index < ${#basenames[@]} ; index++))
do
    echo "[$[index + 1]] ${basenames[$index]}"
done

basepath=''
basename=''
while [ "${basepath}" == '' ]
do
    read -p "Select base image (1) " response
    if [ "${response}" == '' ]
    then
        basepath=${basepaths[0]}
        basename=${basenames[0]}
    else
        words=(${response})
        (( index = ${words[0]} ))
        (( limit = ${#basenames[@]} ))
        if (( (index > 0) && (index <= limit) ))
        then
            basepath=${basepaths[$[index-1]]}
            basename=${basenames[$[index-1]]}
        fi
    fi
done

volsize=$(
    virsh \
        --connect "${connection:?}" \
        vol-info \
            --pool "${basepool:?}" \
            "${basename:?}" \
    | sed -n '
        s/Capacity: *\([0-9]*\)\.\([0-9]*\) \([^ ]*\)/\1\3/p
        '
    )
volname=${nodename:?}.qcow

echo ""
echo "INFO : Node name [${nodename:?}]"
echo "INFO : Base name [${basename:?}]"
echo "INFO : Base path [${basepath:?}]"
echo "INFO : Disc name [${volname:?}]"
echo "INFO : Disc size [${volsize:?}]"
echo ""

thisname=$(hostname -s)
thisline=($(cat "${machines:?}" | awk '{if (($1 == "'${thisname:?}'") && ($2 == "'${nodename:?}'")) {print}}'))

nodemac=${thisline[2]}
nodeip4=${thisline[3]}
nodeip6=${thisline[4]}

echo "INFO : MAC  [${nodemac}]"
echo "INFO : IPv4 [${nodeip4}]"
echo "INFO : IPv6 [${nodeip6}]"
echo ""

confirm "Create virtual machine"
if [ $? -ne 0 ]
then
    echo "EXIT : Cancelled"
    exit 0
fi

#
# Check for existing VM.

domuuid=$(
    virsh \
        --quiet \
        --connect "${connection:?}" \
        domuuid ${nodename:?}
        )

if [ -n "${domuuid}" ]
then
    echo ""
    echo "Found existing virtual machine [${nodename:?}]"
    confirm "Delete existing virtual machine"
    if [ $? -eq 0 ]
    then

        #
        # Check for active VM and kill it. 
        nodestate=$(virsh --connect "${connection:?}" domstate "${domuuid:?}")
        case $nodestate in
            paused|running)
                echo "Stopping virtual machine [${nodename:?}]"
                virsh \
                    --quiet \
                    --connect "${connection:?}" \
                    destroy \
                        "${domuuid:?}"
                ;;        

            *)
                ;;
        esac

        confirm "Delete associated storage"
        if [ $? -eq 0 ]
        then
            echo "Deleting virtual machine [${nodename:?}]"
            virsh \
                --quiet \
                --connect "${connection:?}" \
                undefine \
                    "${domuuid:?}" \
                    --remove-all-storage
        else
            echo "Deleting virtual machine [${nodename:?}]"
            virsh \
                --quiet \
                --connect "${connection:?}" \
                undefine \
                    "${domuuid:?}"
        fi
    else
        echo "EXIT : Found existing virtual machine [${nodename:?}]"
        exit 0
    fi
fi

#
# Check for existing volume.
voluuid=$(
    virsh \
        --connect "${connection:?}" \
        vol-key \
            --pool "${livepool:?}" \
            "${volname:?}" \
            2>/dev/null
        )

if [ -n "${voluuid}" ]
then
    echo ""
    echo "Found existing storage volume [${volname:?}]"
    confirm "Delete storage volume"
    if [ $? -eq 0 ]
    then
        echo "Deleting storage volume [${volname:?}]"
        virsh \
            --quiet \
            --connect "${connection:?}" \
            vol-delete \
                "${volname:?}" \
                --pool "${livepool:?}"
    else
        echo "EXIT : Found existing storage volume [${volname:?}]"
        exit 0
    fi
fi

#
# Create a new volume, backed by the base image.
echo ""
echo "Creating new volume [${volname:?}]"
virsh \
    --quiet \
    --connect "${connection:?}" \
    vol-create-as \
        "${livepool:?}" \
        "${volname:?}" \
        "${volsize:?}" \
        --allocation 0 \
        --format 'qcow2' \
        --backing-vol "${basepath:?}" \
        --backing-vol-format 'qcow2'

virsh \
    --connect "${connection:?}" \
    vol-info \
        --pool "${livepool:?}" \
        "${volname:?}"

#---------------------------------------------------------------------
# Create our cloud-init metadata files.
# http://blog.oddbit.com/2015/03/10/booting-cloud-images-with-libvirt/

    isotemp=$(mktemp -d)

    #
    # Use the authorized keys for the current user
    # to set the keys for the default user.
    cat > "${isotemp:?}/meta-data" << EOF
#cloud-config
public-keys:
$(sed -n '
    /^#/ !{
        s/\(.*\)/  - \1/p
        }
    ' ${HOME}/.ssh/authorized_keys 
    )
EOF

    #
    # Create a config for the current user,
    # including their authorized keys.
    cat > "${isotemp:?}/user-data" << EOF
#cloud-config
users:
  - default
  - name: $(id -un)
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    groups: [users, wheel, docker]
    shell: /bin/bash
    ssh-authorized-keys:
$(sed -n '
    /^#/ !{
        s/\(.*\)/      - \1/p
        }
    ' ~/.ssh/authorized_keys 
    )
EOF

#---------------------------------------------------------------------
# Wrap our metadata files in an ISO image.
# https://linux.die.net/man/1/genisoimage

        isofile=$(mktemp)

        genisoimage \
            -rock \
            -quiet \
            -joliet \
            -volid 'cidata' \
            -input-charset 'utf-8' \
            -output "${isofile:?}" \
            "${isotemp:?}"

#---------------------------------------------------------------------
# Delete any existing ISO volume.

    isosize=$(du -k "${isofile:?}" | cut -f1)
    isoname=${nodename:?}.iso

    isouuid=$(
        virsh \
            --quiet \
            --connect "${connection:?}" \
            vol-key \
                --pool "${initpool:?}" \
                "${isoname:?}" \
                2>/dev/null
            )

    if [ -n "${isouuid}" ]
        then
        virsh \
            --quiet \
            --connect "${connection:?}" \
            vol-delete \
                --pool "${initpool:?}" \
                "${isoname:?}"
        fi

#---------------------------------------------------------------------
# Create a new (empty) volume.

    virsh \
        --quiet \
        --connect "${connection:?}" \
        vol-create-as \
            "${initpool:?}" \
            "${isoname:?}" \
            "${isosize:?}k" \
            --format 'raw'

#---------------------------------------------------------------------
# Upload the ISO image into the new volume.

    virsh \
        --quiet \
        --connect "${connection:?}" \
        vol-upload \
            --pool "${initpool:?}" \
            "${isoname:?}" \
            "${isofile:?}"

#---------------------------------------------------------------------
# Get local paths for the volume files.

    volpath=$(
        virsh \
            --quiet \
            --connect "${connection:?}" \
            vol-path \
                --pool "${livepool:?}" \
                "${volname:?}"
            )

    isopath=$(
        virsh \
            --quiet \
            --connect "${connection:?}" \
            vol-path \
                --pool "${initpool:?}" \
                "${isoname:?}"
            )

#---------------------------------------------------------------------
# Fill in the template.

    tempxml=$(mktemp)

    xmlstarlet \
        ed \
        --update "/domain/name" \
        --value  "${nodename:?}" \
        --update "//interface[@type='network']/mac/@address" \
        --value  "${nodemac:?}" \
        --update "//disk[@device='disk']/source/@file" \
        --value  "${volpath:?}" \
        --update "//disk[@device='cdrom']/source/@file" \
        --value  "${isopath:?}" \
        "${template}" \
      > "${tempxml}"

#---------------------------------------------------------------------
# Create and start a new instance.

    echo "Creating new virtual machine [${nodename:?}]"
    virsh \
        --quiet \
        --connect "${connection:?}" \
            define "${tempxml}"

    echo "Starting new virtual machine [${nodename:?}]"
    virsh \
        --quiet \
        --connect "${connection:?}" \
            start "${nodename:?}"

#---------------------------------------------------------------------
# Tidy up ..

    rm "${tempxml}"
    rm "${isofile:?}"
    rm -r "${isotemp:?}"

#---------------------------------------------------------------------
# Export the node name

    export nodename=${nodename:?}

